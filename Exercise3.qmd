---
title: "Exercise 3"
format: html
---

## Task 1

```{r}
# load libraries
library("tidyverse")
library("readr")
library("sf")

# Import data
wildschwein <- read_delim("data/wildschwein_BE_2056.csv", delim = ",")

wildschwein$TierName |> unique()


sabi <- wildschwein |> filter(TierName == "Sabi") |> 
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz="UTC"), 
         DatetimeUTC < as.POSIXct("2015-07-03", tz="UTC"))

ggplot(sabi, aes(E,N , color = DatetimeUTC))+
  geom_point()+
  geom_path()+
  coord_equal()

sabi |> 
  head(50) |> 
  ggplot(aes(DatetimeUTC, 1))+
  geom_point()

sabi <- sabi |> 
  mutate(
    n_plus1 = sqrt((lead(E,1)-E)^2 + (lead(N,1)-N)^2),
    n_plus2 = sqrt((lead(E,2)-E)^2 + (lead(N,2)-N)^2),
    n_minus1 = sqrt((lag(E, 1)-E)^2 + (lag(N, 1)-N)^2),
    n_minus2 = sqrt((lag(E, 2)-E)^2 + (lag(N, 2)-N)^2)
  )

sabi <- sabi |> 
  rowwise()|> 
  mutate(
    stepMEAN = mean(c(n_minus1, n_minus2, n_plus1, n_plus2), na.rm = TRUE)
  ) |> 
  ungroup()

ggplot(sabi, aes(stepMEAN))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = quantile(sabi$stepMEAN, probs = 0.25, na.rm = TRUE))

sabi |> 
  mutate(static = stepMEAN < mean(stepMEAN,na.rm = TRUE)) |> 
  ggplot(aes(E,N))+
           geom_path()+
           geom_point(aes(color = static))+
           coord_fixed()
```

## Preparation Posmo Data
```{r}
# Import Posmo data

posmo <- read_delim("data/posmo_data.csv")

# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)

# Check for missing values
posmo |> is.na() |> sum() # no NA values

# Transform data to EPSG 2056 coordinate system
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

head(posmo)

# store the coordinates into two separate columns
posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)

# Explore data of a single day
posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-05-07")

# Vizualize with Plot
ggplot(posmo_filter, aes(X,Y , color = datetime))+
  geom_point()+
  geom_path()+
  coord_equal()

# Check for gaps in the data
posmo_filter |> 
  head(50) |> 
  ggplot(aes(datetime, 1))+
  geom_point() # No data gaps
```

## Task 1: Segmentation Posmo Data
### Step a): Specify a temporal window. 
```{r}
# In my posmo dataset, the sampling interval is 15 seconds. If we take a temporal window of 60 seconds, that would mean including 4 fixes per minute. We need to calculate the following Euclidean distances (pos representing single location):

#1 pos[n-2] to pos[n]
#2 pos[n-1] to pos[n]
#3 pos[n] to pos[n+1]
#4 pos[n] to pos[n+2]
```

### Step b): Measure the distance from every point to every other point within this temporal window 
```{r}
posmo_filter <- posmo_filter |>
    mutate(
        n_minus2 = sqrt((lag(X,2)-X)^2 + (lag(Y, 2)-Y)^2), # distance to pos -30 seconds
        n_minus1 = sqrt((lag(X,1)-X)^2 + (lag(Y, 1)-Y)^2), # distance to pos -15 seconds
        n_plus1 = sqrt((lead(X,1)-X)^2 + (lead(Y,1)-Y)^2), # distance to pos +15 seconds
        n_plus2 = sqrt((lead(X,2)-X)^2 + (lead(Y,2)-Y)^2), # distance to pos +30 seconds
    )

# Calculate the mean distance for each new column per row
posmo_filter <- posmo_filter |> 
  rowwise()|> 
  mutate(
    stepMEAN = mean(c(n_minus1, n_minus2, n_plus1, n_plus2), na.rm = TRUE)
  ) |> 
  ungroup()

# Vizualize with Histogram
ggplot(posmo_filter, aes(stepMEAN))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMEAN, na.rm = TRUE))

```

### Step c): Remove “static points”
```{r}
# We can now determine if an animal is moving or not by specifying a threshold distance on stepMean.

# Create new column "static" with values TRUE/FALSE
posmo_filter <- posmo_filter |> 
  mutate(static = stepMEAN < mean(stepMEAN,na.rm = TRUE))

# Excluding static data
posmo_filter_moving <- posmo_filter |>
  filter(!static)
```

## Task 2: Specify and apply threshold 
```{r}
summary(posmo_filter$stepMEAN)

ggplot(posmo_filter, aes(stepMEAN))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMEAN, na.rm = TRUE))

ggplot(posmo_filter, aes(stepMEAN))+
  geom_boxplot()+
  geom_vline(xintercept = mean(posmo_filter$stepMEAN, na.rm = TRUE))
  
```


## Task 3: Visualize segmented trajectories
```{r}
# Vizualize according to the static values  
ggplot(posmo_filter, aes(X,Y))+
           geom_path()+
           geom_point(aes(color = static))+
           coord_fixed() # Plot with static and nonstatic data

# Vizualize moving data with plot
ggplot(posmo_filter_moving, aes(X,Y))+
           geom_path()+
           geom_point()+
           coord_fixed()
```

