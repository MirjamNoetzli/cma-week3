---
title: "Exercise 3"
format: html
---

## Task 1

```{r}
# load libraries
library("tidyverse")
library("readr")
library("sf")

# Import data
wildschwein <- read_delim("data/wildschwein_BE_2056.csv", delim = ",")

wildschwein$TierName |> unique()


sabi <- wildschwein |> filter(TierName == "Sabi") |> 
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz="UTC"), 
         DatetimeUTC < as.POSIXct("2015-07-03", tz="UTC"))

ggplot(sabi, aes(E,N , color = DatetimeUTC))+
  geom_point()+
  geom_path()+
  coord_equal()

sabi |> 
  head(50) |> 
  ggplot(aes(DatetimeUTC, 1))+
  geom_point()

sabi <- sabi |> 
  mutate(
    n_plus1 = sqrt((lead(E,1)-E)^2 + (lead(N,1)-N)^2),
    n_plus2 = sqrt((lead(E,2)-E)^2 + (lead(N,2)-N)^2),
    n_minus1 = sqrt((lag(E, 1)-E)^2 + (lag(N, 1)-N)^2),
    n_minus2 = sqrt((lag(E, 2)-E)^2 + (lag(N, 2)-N)^2)
  )

sabi <- sabi |> 
  rowwise()|> 
  mutate(
    stepMEAN = mean(c(n_minus1, n_minus2, n_plus1, n_plus2), na.rm = TRUE)
  ) |> 
  ungroup()

ggplot(sabi, aes(stepMEAN))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = quantile(sabi$stepMEAN, probs = 0.25, na.rm = TRUE))

sabi |> 
  mutate(static = stepMEAN < mean(stepMEAN,na.rm = TRUE)) |> 
  ggplot(aes(E,N))+
           geom_path()+
           geom_point(aes(color = static))+
           coord_fixed()
```

## Preparation Posmo Data
```{r}
# Import Posmo data

posmo <- read_delim("data/posmo_data.csv")

# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)

# Check for missing values
posmo |> is.na() |> sum() # no NA values

# Transform data to EPSG 2056 coordinate system
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

head(posmo)

# store the coordinates into two separate columns
posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)

# Explore data of a single day
posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-05-07")

# Vizualize with Plot
ggplot(posmo_filter, aes(X,Y , color = datetime))+
  geom_point()+
  geom_path()+
  coord_equal()

# Check for gaps in the data
posmo_filter |> 
  head(50) |> 
  ggplot(aes(datetime, 1))+
  geom_point() # No data gaps
```

## Task 1: Segmentation Posmo Data
### Step a): Specify a temporal window. 
```{r}
# In my posmo dataset, the sampling interval is 15 seconds. If we take a temporal window of 60 seconds, that would mean including 4 fixes per minute. We need to calculate the following Euclidean distances (pos representing single location):

#1 pos[n-2] to pos[n]
#2 pos[n-1] to pos[n]
#3 pos[n] to pos[n+1]
#4 pos[n] to pos[n+2]
```

### Step b): Measure the distance from every point to every other point within this temporal window 
```{r}
posmo_filter <- posmo_filter |>
    mutate(
        n_minus2 = sqrt((lag(X,2)-X)^2 + (lag(Y, 2)-Y)^2), # distance to pos -30 seconds
        n_minus1 = sqrt((lag(X,1)-X)^2 + (lag(Y, 1)-Y)^2), # distance to pos -15 seconds
        n_plus1 = sqrt((lead(X,1)-X)^2 + (lead(Y,1)-Y)^2), # distance to pos +15 seconds
        n_plus2 = sqrt((lead(X,2)-X)^2 + (lead(Y,2)-Y)^2), # distance to pos +30 seconds
    )

# Calculate the mean distance for each new column per row
posmo_filter <- posmo_filter |> 
  rowwise()|> 
  mutate(
    stepMEAN = mean(c(n_minus1, n_minus2, n_plus1, n_plus2), na.rm = TRUE)
  ) |> 
  ungroup()

# Vizualize with Histogram
ggplot(posmo_filter, aes(stepMEAN))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMEAN, na.rm = TRUE))

```

### Step c): Remove “static points”
```{r}
# We can now determine if an animal is moving or not by specifying a threshold distance on stepMean.

# Create new column "static" with values TRUE/FALSE
posmo_filter <- posmo_filter |> 
  mutate(static = stepMEAN < mean(stepMEAN,na.rm = TRUE))

# Excluding static data
posmo_filter_moving <- posmo_filter |>
  filter(!static)
```

## Task 2: Specify and apply threshold 
```{r}
summary(posmo_filter$stepMEAN)

ggplot(posmo_filter, aes(stepMEAN))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMEAN, na.rm = TRUE))

ggplot(posmo_filter, aes(stepMEAN))+
  geom_boxplot()+
  geom_vline(xintercept = mean(posmo_filter$stepMEAN, na.rm = TRUE))
  
```

## Task 3: Visualize segmented trajectories
```{r}
# Vizualize according to the static values  
ggplot(posmo_filter, aes(X,Y))+
           geom_path()+
           geom_point(aes(color = static))+
           coord_fixed() # Plot with static and nonstatic data

# Vizualize moving data with plot
ggplot(posmo_filter_moving, aes(X,Y))+
           geom_path()+
           geom_point()+
           coord_fixed()
```

## Task 4: Segment-based analysis
```{r}
# Assigns unique IDs based on the column "static"
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo_filter <- posmo_filter |>
    mutate(segment_id = rle_id(static))

head(posmo_filter)

# Vizualize with Plot
plot_all_segments <- ggplot(posmo_filter, aes(X,Y))+
  geom_path(aes(color=segment_id))+
  geom_point(aes(color = segment_id))+
  scale_color_hue()+
  coord_fixed()+
  theme(legend.position="none")
  
plot_all_segments <- plot_all_segments + labs(title = "All segments (uncleaned)")

# Filter segments that are > 5 minutes long
posmo_filter_long <- posmo_filter |> 
  arrange(segment_id, datetime) |> 
  mutate(time_diff = difftime(datetime, lag(datetime), units = "mins"),
         time_diff = ifelse(is.na(time_diff), 0, time_diff)) |> 
  group_by(segment_id) |> 
  mutate(cumulative_time = cumsum(time_diff)) |> 
  filter(cumulative_time > 5) |> 
  ungroup()

# Vizualize with Plot
plot_long_segments <- ggplot(posmo_filter_long, aes(X,Y))+
  geom_path(aes(color=segment_id))+
  geom_point(aes(color = segment_id))+
  scale_color_hue()+
  coord_fixed()+
  theme(legend.position="none")

plot_long_segments <- plot_long_segments + labs(title = "Long segments (removed segments <5 minutes)")

# Vizualize both Plots side by side
gridExtra::grid.arrange(plot_all_segments, plot_long_segments, ncol=2)+
  labs(title = "Moving segments coloured by segment ID")
  
```

## Task 5: Similarity measures
```{r}
# Import Data
pedestrian <- read_delim("data/pedestrian.csv", delim = ",")

pedestrian$TrajID |> unique()

pedestrian1 <- pedestrian |> filter(TrajID == 1) 

pedestrian1_plot <- ggplot(pedestrian1, aes(E,N))+
  geom_point(color = "red")+
  geom_path(color = "red")+
  coord_equal()+
  labs(title = "TrajID: 1")+
  theme(plot.title = element_text(hjust = 0.5))

pedestrian2 <- pedestrian |> filter(TrajID == 2) 

pedestrian2_plot <- ggplot(pedestrian2, aes(E,N))+
  geom_point(color = "yellow")+
  geom_path(color = "yellow")+
  coord_equal()+
  labs(title = "TrajID: 2")+
  theme(plot.title = element_text(hjust = 0.5))


pedestrian3 <- pedestrian |> filter(TrajID == 3)
  
pedestrian3_plot <- ggplot(pedestrian3, aes(E,N))+
  geom_point(color = "green")+
  geom_path(color = "green")+
  coord_equal()+
  labs(title = "TrajID: 3")+
  theme(plot.title = element_text(hjust = 0.5))


pedestrian4 <- pedestrian |> filter(TrajID == 4)

pedestrian4_plot <- ggplot(pedestrian4, aes(E,N))+
  geom_point(color = "navy")+
  geom_path(color = "navy")+
  coord_equal()+
  labs(title = "TrajID: 4")+
  theme(plot.title = element_text(hjust = 0.5))


pedestrian5 <- pedestrian |> filter(TrajID == 5)
  
pedestrian5_plot <- ggplot(pedestrian5, aes(E,N))+
  geom_point(color = "orange")+
  geom_path(color = "orange")+
  coord_equal()+
  labs(title = "TrajID: 5")+
  theme(plot.title = element_text(hjust = 0.5))


pedestrian6 <- pedestrian |> filter(TrajID == 6)

pedestrian6_plot <- ggplot(pedestrian6, aes(E,N))+
  geom_point(color = "black")+
  geom_path(color = "black")+
  coord_equal()+
  labs(title = "TrajID: 6")+
  theme(plot.title = element_text(hjust = 0.5))


library("cowplot")
plot_grid <- plot_grid(pedestrian1_plot, pedestrian2_plot, pedestrian3_plot, pedestrian4_plot, pedestrian5_plot, pedestrian6_plot, ncol=2)

plot_grid
```

## Task 6: Calculate similarity
```{r}
# Install and required load package
install.packages("SimilarityMeasures")
library("SimilarityMeasures")

# Get familiar with package
help(package = "SimilarityMeasures")

# Get the E & N Values for each trajectory
E1 <- pedestrian$E[pedestrian$TrajID == 1]
N1 <- pedestrian$N[pedestrian$TrajID == 1]
E2 <- pedestrian$E[pedestrian$TrajID == 2]
N2 <- pedestrian$N[pedestrian$TrajID == 2]
E3 <- pedestrian$E[pedestrian$TrajID == 3]
N3 <- pedestrian$N[pedestrian$TrajID == 3]
E4 <- pedestrian$E[pedestrian$TrajID == 4]
N4 <- pedestrian$N[pedestrian$TrajID == 4]
E5 <- pedestrian$E[pedestrian$TrajID == 5]
N5 <- pedestrian$N[pedestrian$TrajID == 5]
E6 <- pedestrian$E[pedestrian$TrajID == 6]
N6 <- pedestrian$N[pedestrian$TrajID == 6]

# Add the E & N values to the newly defined trajectories
traj1 <- cbind(E1, N1)
traj2 <- cbind(E2, N2)
traj3 <- cbind(E3, N3)
traj4 <- cbind(E4, N4)
traj5 <- cbind(E5, N5)
traj6 <- cbind(E6, N6)

# Calculating the dynamic time warping algorithm (DTW) for the trajectories
DTW1_2 <- DTW(traj1, traj2, pointSpacing=-1) # 3650.025
DTW1_3 <- DTW(traj1, traj3, pointSpacing=-1) # 50785.51
DTW1_4 <- DTW(traj1, traj4, pointSpacing=-1) # 5906.787
DTW1_5 <- DTW(traj1, traj5, pointSpacing=-1) # 2178.411
DTW1_6 <- DTW(traj1, traj6, pointSpacing=-1) # 1152.718
# The smallest warp path  of 1152.718 is between trajectory 1 & trajectory 6

# Create a data frame with all DTW values
DTW_all <- data.frame(Trajectory = c(2:6),
                      Measure = "DTW",
                      Value = c(DTW1_2, DTW1_3, DTW1_4, DTW1_5, DTW1_6))

# Calculating Edit Distance between the trajectories
EditDist1_2 <- EditDist(traj1, traj2, pointDistance=20) # 45
EditDist1_3 <- EditDist(traj1, traj3, pointDistance=20) # 47
EditDist1_4 <- EditDist(traj1, traj4, pointDistance=20) # 42
EditDist1_5 <- EditDist(traj1, traj5, pointDistance=20) # 28
EditDist1_6 <- EditDist(traj1, traj6, pointDistance=20) # 27
# Trajectory 1 & Trajectory 6 are most similar with minimum 27 edits required to allow the two trajectories to be considered equivilant

# Create a data frame with all Edit Distances
EditDist_all <- data.frame(Trajectory = c(2:6),
                      Measure = "EditDist",
                      Value = c(EditDist1_2, EditDist1_3, EditDist1_4, EditDist1_5, EditDist1_6))

# Calculating Frechet distance between the trajectories
Frechet1_2 <- Frechet(traj1, traj2, testLeash=-1) # 28.54075 
Frechet1_3 <- Frechet(traj1, traj3, testLeash=-1) # 2307.844
Frechet1_4 <- Frechet(traj1, traj4, testLeash=-1) # 1069.229 
Frechet1_5 <- Frechet(traj1, traj5, testLeash=-1) # 717.9816 
Frechet1_6 <- Frechet(traj1, traj6, testLeash=-1) # 38.96272 
# The minimum lenght is between trajectory 1 & trajectory 2 (28.54075)

# Create a data frame with all Frechet distances
Frechet_all <- data.frame(Trajectory = c(2:6),
                      Measure = "Frechet",
                      Value = c(Frechet1_2, Frechet1_3, Frechet1_4, Frechet1_5, Frechet1_6))


# Calculate LCSS Algorithm on the longest common subsequences between two trajectories
LCSS1_2 <- LCSS(traj1, traj2, pointSpacing=-1, pointDistance=20, 
     errorMarg=10, returnTrans=FALSE) # 17
LCSS1_3 <- LCSS(traj1, traj3, pointSpacing=-1, pointDistance=20, 
     errorMarg=10, returnTrans=FALSE) # 1
LCSS1_4 <- LCSS(traj1, traj4, pointSpacing=-1, pointDistance=20, 
     errorMarg=10, returnTrans=FALSE) # 18
LCSS1_5 <- LCSS(traj1, traj5, pointSpacing=-1, pointDistance=20, 
     errorMarg=10, returnTrans=FALSE) # 31
LCSS1_6 <- LCSS(traj1, traj6, pointSpacing=-1, pointDistance=20, 
     errorMarg=10, returnTrans=FALSE) # 26
# The longes common subsequence of 31 is between trajectory 1 & trajectory 5

# Create a data frame with all LCSS algorithms
LCSS_all <- data.frame(Trajectory = c(2:6),
                      Measure = "LCSS",
                      Value = c(LCSS1_2, LCSS1_3, LCSS1_4, LCSS1_5, LCSS1_6))

# Create a data frame with values of all types of similarity measures combined
measures_all <- rbind(DTW_all, EditDist_all, Frechet_all, LCSS_all)

# Vizualize all similarity measures with a plot
ggplot(measures_all, aes(Trajectory, Value, fill = as.factor(Trajectory)))+
  geom_bar(stat = "identity")+
  facet_wrap(.~Measure, scales = "free_y")+
  xlab("Comparison trajectory")+
  ylab("Value")+
  ggtitle("Computed similarities using different measures between trajectory 1 to all other trajectories")+
  theme(plot.title = element_text(hjust = 0.5))+
  theme(legend.position = "none")

# My intuition about the measure results is reflected in the plots
```

